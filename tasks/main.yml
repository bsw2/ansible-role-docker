---
# Work around "docker-py is needed for this module" error with docker-machine
- set_fact:
    ansible_python_interpreter: "/usr/bin/env python"

- name: Use tls with Docker on systems running docker-machine
  set_fact:
    docker_use_tls: encrypt
  when: ansible_env.DOCKER_MACHINE_NAME is defined

- name: Manage the Docker containers natively with Docker
  docker:
    name: "{{ item['name'] }}"
    image: "{{ item['image'] }}"
    privileged: "{{ item['privileged'] | default(container_privileged) }}"
    state: "{{ item['state'] | default(container_state) }}"
    use_tls: "{{ docker_use_tls | default(omit) }}"
    ports: "{{ item['ports'] | default(omit) }}"
    volumes: "{{ item['volumes'] | default(omit) }}"
  when: "{{ item['run_as_service'] | default(not container_run_as_service) }}"
  with_items: "{{ docker_containers }}"

# Create a mock docker executable in order to test the role on a system that doesn't have docker installed
- name: Copy the docker mock to /usr/bin/docker
  copy: src="{{ role_path }}/files/docker" dest=/usr/bin/docker owner=root group=root mode=0755
  when: "{{ docker_mocker }}"

- name: Create systemd service to manage the Docker containers
  template: src=container.service.j2 dest=//etc/systemd/system/{{ item['name'] }}.service owner=root group=root mode=0644
  when: "{{ item['run_as_service'] | default(container_run_as_service) }}"
  with_items: "{{ docker_containers }}"
  notify: Reload systemd

- name: Enable and start the Docker container services
  service: name="{{ item['name'] }}" state=started enabled=yes
  when: "{{ item['run_as_service'] | default(container_run_as_service) }}"
  with_items: "{{ docker_containers }}"

- name: Give the containers time to start/exit
  pause: seconds="{{ container_pause_seconds }}"
